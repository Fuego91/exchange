{"version":3,"sources":["containers/exchange.constants.ts","components/currency-selector/currency-selector.component.tsx","actions/exchange.actions.ts","components/exchange-amount-input/exchange-amount-input.component.tsx","components/exchange-item/exchange-item.component.tsx","selectors/exchange.selector.ts","containers/exchange.container.tsx","hooks/rates.hook.ts","reducers/exchange.reducer.ts","reducers/index.ts","App.tsx","index.tsx"],"names":["CURRENCIES_MAP","USD","code","symbol","fullName","SEK","GBP","PLN","ExchangeActionType","FulNameSpan","styled","span","CurrencySelector","selectedCurrency","onCurrencySelect","Select","disableUnderline","data-testid","value","displayEmpty","onChange","changeEvent","target","renderValue","Object","keys","map","key","currency","MenuItem","ExchangeAmountInput","currencySymbol","amount","onAmountChange","isSource","Input","currentTarget","formattedValue","replace","test","startAdornment","InputAdornment","position","endAdornment","inputProps","style","width","length","ExchangeItem","balance","isBalanceNegative","Grid","container","spacing","justify","item","xs","FormHelperText","error","getRateLabel","sourceItem","targetItem","rates","currencyCode","selectExchangeState","exchange","source","balances","negativeSourceBalance","isNegativeSourceBalance","isSubmitDisabled","baseRateLabel","EllipseButton","Button","borderRadius","GridWithTopMargin","marginTop","zIndex","FixedWidthChip","Chip","minWidth","background","Exchange","dispatch","useDispatch","useSelector","submitDisabled","baseCurrencyCode","onRatesUpdated","fetchRates","useCallback","fetch","then","response","json","useEffect","interval","setInterval","clearInterval","useRates","type","RatesUpdated","payload","newAmount","SourceAmountChanged","newCurrency","SourceCurrencyChanged","IconButton","color","aria-label","size","onClick","FlipInputsClicked","FlipCameraAndroid","label","variant","TargetAmountChanged","TargetCurrencyChanged","fullWidth","className","disabled","ExecuteExchange","INITIAL_EXCHANGE_STATE","getNewSourceAmount","targetAmount","targetCurrencyCode","rate","fullAmount","Math","ceil","floor","toFixed","toString","getNewTargetAmount","sourceAmount","flipCurrencies","state","handleSourceAmountChangedAction","handleTargetAmountChangedAction","handleSourceCurrencyChanged","handleTargetCurrencyChanged","handleRatesUpdated","to","from","handleExecuteExchange","sourceBalance","targetBalance","exchangeReducer","action","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","AppWrapper","div","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8057327d.chunk.js","sourcesContent":["export const CURRENCIES_MAP = {\n  USD: {\n    code: 'USD',\n    symbol: '$',\n    fullName: 'United States Dollar',\n  },\n  SEK: {\n    code: 'SEK',\n    symbol: 'kr',\n    fullName: 'Swedish Krona',\n  },\n  GBP: {\n    code: 'GBP',\n    symbol: '£',\n    fullName: 'British Pound',\n  },\n  PLN: {\n    code: 'PLN',\n    symbol: 'zł',\n    fullName: 'Polish Zloty',\n  },\n};\n","import React, { FC, ReactNode } from 'react';\nimport { Select, MenuItem } from '@material-ui/core';\nimport Currency from 'models/currency.model';\nimport styled from 'styled-components';\nimport { CURRENCIES_MAP } from 'containers/exchange.constants';\n\ninterface CurrencySelectorProps {\n  selectedCurrency: Currency;\n  onCurrencySelect: (currency: Currency) => void;\n}\n\nconst FulNameSpan = styled.span`\n  color: #0000008a;\n  padding-left: 5px;\n`;\n\nexport const CurrencySelector: FC<CurrencySelectorProps> = ({\n  selectedCurrency,\n  onCurrencySelect,\n}: CurrencySelectorProps) => {\n  const handleSelect = (changeEvent: React.ChangeEvent<any>): void => {\n    if (changeEvent.target) {\n      onCurrencySelect(CURRENCIES_MAP[changeEvent.target.value]);\n    }\n  };\n\n  const getMenuItem = (currency: Currency): ReactNode => (\n    <MenuItem key={currency.code} value={currency.code}>\n      <span>{currency.code}</span>\n      <FulNameSpan>{currency.fullName}</FulNameSpan>\n    </MenuItem>\n  );\n\n  return (\n    <Select\n      disableUnderline={true}\n      data-testid=\"currency-selector\"\n      value={selectedCurrency ? selectedCurrency.code : null}\n      displayEmpty={!selectedCurrency}\n      onChange={handleSelect}\n      renderValue={(value: any) => value}>\n      {Object.keys(CURRENCIES_MAP).map((key: string) => getMenuItem(CURRENCIES_MAP[key]))}\n    </Select>\n  );\n};\n","import Currency from 'models/currency.model';\nimport { RatesMap } from 'reducers/exchange.reducer';\n\nexport enum ExchangeActionType {\n  FlipInputsClicked = '[Exchange] Flip Inputs Clicked',\n  SourceAmountChanged = '[Exchange] Source Amount Changed',\n  SourceCurrencyChanged = '[Exchange] Source Currency Changed',\n  TargetAmountChanged = '[Exchange] Target Amount Changed',\n  TargetCurrencyChanged = '[Exchange] Target Currency Changed',\n  ExchangeClicked = '[Exchange] Exchange Clicked',\n  RatesUpdated = '[Exchange] Rates updated',\n  ClearAmounts = '[Exchange] Clear Amounts',\n  ExecuteExchange = '[Balances] Execute Exchange',\n}\n\ninterface FlipInputsClickedAction {\n  type: ExchangeActionType;\n}\n\nexport const FlipInputsClicked = (): FlipInputsClickedAction => ({\n  type: ExchangeActionType.FlipInputsClicked,\n});\n\nexport interface AmountChangedAction {\n  type: ExchangeActionType;\n  payload: string;\n}\n\nexport const SourceAmountChanged = (newAmount: string): AmountChangedAction => ({\n  type: ExchangeActionType.SourceAmountChanged,\n  payload: newAmount,\n});\n\nexport const TargetAmountChanged = (newAmount: string): AmountChangedAction => ({\n  type: ExchangeActionType.TargetAmountChanged,\n  payload: newAmount,\n});\n\nexport interface CurrencyChangedAction {\n  type: ExchangeActionType;\n  payload: Currency;\n}\n\nexport const SourceCurrencyChanged = (newCurrency: Currency): CurrencyChangedAction => ({\n  type: ExchangeActionType.SourceCurrencyChanged,\n  payload: newCurrency,\n});\n\nexport const TargetCurrencyChanged = (newCurrency: Currency): CurrencyChangedAction => ({\n  type: ExchangeActionType.TargetCurrencyChanged,\n  payload: newCurrency,\n});\n\ninterface ExchangeClickedAction {\n  type: ExchangeActionType;\n}\n\nexport const ExchangeClicked = (): ExchangeClickedAction => ({\n  type: ExchangeActionType.ExchangeClicked,\n});\n\nexport interface RatesUpdatedAction {\n  type: ExchangeActionType;\n  payload: RatesMap;\n}\n\nexport const RatesUpdated = (rates: RatesMap): RatesUpdatedAction => ({\n  type: ExchangeActionType.RatesUpdated,\n  payload: rates,\n});\n\ninterface ClearAmountsAction {\n  type: ExchangeActionType;\n}\n\nexport const ClearAmounts = (): ClearAmountsAction => ({\n  type: ExchangeActionType.ClearAmounts,\n});\n\ninterface ExecuteExchangeAction {\n  type: ExchangeActionType;\n}\n\nexport const ExecuteExchange = (): ExecuteExchangeAction => ({\n  type: ExchangeActionType.ExecuteExchange,\n});\n\nexport type ExchangeActionTypes =\n  | FlipInputsClickedAction\n  | CurrencyChangedAction\n  | AmountChangedAction\n  | ExchangeClickedAction\n  | RatesUpdatedAction\n  | ClearAmountsAction\n  | ExecuteExchangeAction;\n","import React, { FC } from 'react';\nimport { InputAdornment, Input } from '@material-ui/core';\n\ninterface ExchangeAmountInputProps {\n  amount: string;\n  currencySymbol: string;\n  isSource: boolean;\n  onAmountChange: (amount: string) => void;\n}\n\nexport const ExchangeAmountInput: FC<ExchangeAmountInputProps> = ({\n  currencySymbol,\n  amount,\n  onAmountChange,\n  isSource,\n}: ExchangeAmountInputProps) => {\n  const CurrencySymbol: FC = () => <InputAdornment position=\"end\">{currencySymbol}</InputAdornment>;\n\n  const WithdrawDirectionSign: FC = () => (\n    <InputAdornment position=\"start\">{isSource ? '-' : '+'}</InputAdornment>\n  );\n\n  const handleAmountChange = (changeEvent: React.ChangeEvent<HTMLInputElement>): void => {\n    const { value } = changeEvent.currentTarget;\n    const formattedValue = value ? value.replace(',', '.') : value;\n    // eslint-disable-next-line\n    const regexp = /^\\d*([\\.]{1}\\d{0,2})?$/g;\n    if (regexp.test(formattedValue)) {\n      onAmountChange(formattedValue);\n    }\n  };\n\n  return (\n    <Input\n      disableUnderline={true}\n      value={amount}\n      onChange={handleAmountChange}\n      startAdornment={<WithdrawDirectionSign />}\n      endAdornment={<CurrencySymbol />}\n      inputProps={{\n        style: {\n          width: amount.length * 5 + 50 || 50,\n        },\n      }}\n    />\n  );\n};\n","import React, { FC } from 'react';\nimport { FormHelperText, Grid } from '@material-ui/core';\nimport Currency from 'models/currency.model';\nimport { CurrencySelector } from '../currency-selector/currency-selector.component';\nimport { ExchangeAmountInput } from 'components/exchange-amount-input/exchange-amount-input.component';\n\ninterface ExchangeItemProps {\n  amount: string;\n  balance: number;\n  selectedCurrency: Currency;\n  isSource: boolean;\n  isBalanceNegative?: boolean;\n  onAmountChange: (amount: string) => void;\n  onCurrencySelect: (currency: Currency) => void;\n}\n\nexport const ExchangeItem: FC<ExchangeItemProps> = ({\n  selectedCurrency,\n  amount,\n  balance,\n  onAmountChange,\n  onCurrencySelect,\n  isSource,\n  isBalanceNegative,\n}) => {\n  return (\n    <Grid container spacing={0} justify=\"space-between\">\n      <Grid item xs={2}>\n        <CurrencySelector selectedCurrency={selectedCurrency} onCurrencySelect={onCurrencySelect} />\n      </Grid>\n      <Grid item xs=\"auto\">\n        <ExchangeAmountInput\n          amount={amount}\n          currencySymbol={selectedCurrency.symbol}\n          isSource={isSource}\n          onAmountChange={onAmountChange}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <FormHelperText error={isBalanceNegative}>\n          Balance:&nbsp;{balance || 0}&nbsp;{selectedCurrency ? selectedCurrency.symbol : ''}\n        </FormHelperText>\n      </Grid>\n    </Grid>\n  );\n};\n","import { RatesMap } from 'reducers/exchange.reducer';\nimport Currency from 'models/currency.model';\nimport { RootState } from 'reducers';\nimport { CURRENCIES_MAP } from 'containers/exchange.constants';\n\nexport interface ExchangeSelectorResultItem {\n  currency: Currency;\n  currencyCode: string;\n  amount: string;\n  balance: number;\n}\n\nexport interface ExchangeSelectorResult {\n  source: ExchangeSelectorResultItem;\n  target: ExchangeSelectorResultItem;\n  baseRateLabel: string;\n  isSubmitDisabled: boolean;\n  isNegativeSourceBalance: boolean;\n}\n\nconst getRateLabel = (\n  sourceItem: ExchangeSelectorResultItem,\n  targetItem: ExchangeSelectorResultItem,\n  rates: RatesMap\n): string =>\n  `1 ${sourceItem.currency.symbol} = ${rates[targetItem.currencyCode]} ${\n    targetItem.currency.symbol\n  }`;\n\nexport const selectExchangeState = ({ exchange }: RootState): ExchangeSelectorResult => {\n  const { source, target, balances } = exchange;\n  const negativeSourceBalance =\n    !balances[source.currencyCode] || +source.amount > balances[source.currencyCode];\n  const sourceItem = {\n    ...source,\n    currency: CURRENCIES_MAP[source.currencyCode],\n    balance: exchange.balances[source.currencyCode] || 0,\n  };\n  const targetItem = {\n    ...target,\n    currency: CURRENCIES_MAP[target.currencyCode],\n    balance: exchange.balances[target.currencyCode] || 0,\n  };\n\n  return {\n    ...exchange,\n    source: sourceItem,\n    target: targetItem,\n    isNegativeSourceBalance: negativeSourceBalance,\n    isSubmitDisabled: !+source.amount || !+target.amount || !!negativeSourceBalance,\n    baseRateLabel: getRateLabel(sourceItem, targetItem, exchange.rates),\n  };\n};\n","import React, { FC } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { IconButton, styled, Chip, Grid } from '@material-ui/core';\nimport { FlipCameraAndroid } from '@material-ui/icons';\nimport { ExchangeItem } from '../components/exchange-item/exchange-item.component';\nimport Currency from 'models/currency.model';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FlipInputsClicked,\n  SourceAmountChanged,\n  TargetAmountChanged,\n  SourceCurrencyChanged,\n  TargetCurrencyChanged,\n  RatesUpdated,\n  ExecuteExchange,\n} from 'actions/exchange.actions';\nimport { selectExchangeState, ExchangeSelectorResult } from 'selectors/exchange.selector';\nimport { RatesMap } from 'reducers/exchange.reducer';\nimport { useRates } from '../hooks/rates.hook';\nimport { RootState } from 'reducers';\n\nconst EllipseButton = styled(Button)({\n  borderRadius: 50,\n});\n\nconst GridWithTopMargin = styled(Grid)({\n  marginTop: 55,\n  zIndex: 1,\n});\n\nconst FixedWidthChip = styled(Chip)({\n  minWidth: 160,\n  background: '#fff',\n});\n\nexport const Exchange: FC = () => {\n  const dispatch = useDispatch();\n\n  const {\n    source,\n    target,\n    baseRateLabel,\n    isNegativeSourceBalance: negativeSourceBalance,\n    isSubmitDisabled: submitDisabled,\n  } = useSelector<RootState, ExchangeSelectorResult>(selectExchangeState);\n\n  const handleRatesUpdate = (rates: RatesMap) => dispatch(RatesUpdated(rates));\n\n  useRates(source.currencyCode, handleRatesUpdate);\n\n  const handleFlipInputs = () => dispatch(FlipInputsClicked());\n\n  const handleSourceAmountChange = (amount: string) => dispatch(SourceAmountChanged(amount));\n\n  const handleTargetAmountChange = (amount: string) => dispatch(TargetAmountChanged(amount));\n\n  const handleSourceCurrencyChange = (currency: Currency) =>\n    dispatch(SourceCurrencyChanged(currency));\n\n  const handleTargetCurrencyChange = (currency: Currency) =>\n    dispatch(TargetCurrencyChanged(currency));\n\n  const handleExchangeClick = () => dispatch(ExecuteExchange());\n\n  return (\n    <GridWithTopMargin container spacing={3} justify=\"space-between\">\n      <Grid item xs={12}>\n        <div data-testid=\"source-input\">\n          {source && (\n            <ExchangeItem\n              isSource={true}\n              amount={source.amount}\n              balance={source.balance}\n              isBalanceNegative={negativeSourceBalance}\n              selectedCurrency={source.currency}\n              onAmountChange={handleSourceAmountChange}\n              onCurrencySelect={handleSourceCurrencyChange}\n            />\n          )}\n        </div>\n      </Grid>\n      <Grid item xs={2}>\n        <IconButton\n          color=\"primary\"\n          data-testid=\"flip-btn\"\n          aria-label=\"delete\"\n          size=\"small\"\n          onClick={handleFlipInputs}>\n          <FlipCameraAndroid />\n        </IconButton>\n      </Grid>\n      <Grid item xs=\"auto\">\n        <FixedWidthChip label={baseRateLabel} color=\"primary\" variant=\"outlined\" />\n      </Grid>\n      <Grid item xs={12}>\n        <div data-testid=\"target-input\">\n          {target && (\n            <ExchangeItem\n              isSource={false}\n              amount={target.amount}\n              balance={target.balance}\n              selectedCurrency={target.currency}\n              onAmountChange={handleTargetAmountChange}\n              onCurrencySelect={handleTargetCurrencyChange}\n            />\n          )}\n        </div>\n      </Grid>\n\n      <Grid item xs={12}>\n        <EllipseButton\n          variant=\"contained\"\n          color=\"secondary\"\n          fullWidth={true}\n          className=\"exchange-btn\"\n          disabled={submitDisabled}\n          onClick={handleExchangeClick}>\n          Exchange\n        </EllipseButton>\n      </Grid>\n    </GridWithTopMargin>\n  );\n};\n","import { useEffect, useCallback } from 'react';\nimport { RatesMap } from 'reducers/exchange.reducer';\n\nconst API_URL = 'https://api.exchangeratesapi.io';\n\nexport interface RatesHookProps {\n  baseCurrencyCode: string;\n  onRatesUpdated: (rates: RatesMap) => void;\n}\n\nexport const useRates = (\n  baseCurrencyCode: string,\n  onRatesUpdated: (rates: RatesMap) => void\n): void => {\n  const fetchRates = useCallback(() => {\n    if (baseCurrencyCode) {\n      fetch(`${API_URL}/latest?base=${baseCurrencyCode}`)\n        .then(response => response.json())\n        .then((response: { rates: RatesMap }) => {\n          onRatesUpdated(response.rates);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [baseCurrencyCode]);\n\n  useEffect(() => {\n    fetchRates();\n    const interval = setInterval(() => {\n      fetchRates();\n    }, 10000);\n    return () => clearInterval(interval);\n  }, [baseCurrencyCode, fetchRates]);\n};\n","import {\n  ExchangeActionType,\n  ExchangeActionTypes,\n  AmountChangedAction,\n  CurrencyChangedAction,\n  RatesUpdatedAction,\n} from 'actions/exchange.actions';\n\nexport interface RatesMap {\n  [currencyCode: string]: number;\n}\n\nexport interface BalancesMap {\n  [currencyCode: string]: number;\n}\n\nexport interface ExchangeItem {\n  currencyCode: string;\n  amount: string;\n}\n\nexport interface ExchangeState {\n  source: ExchangeItem;\n  target: ExchangeItem;\n  rates: RatesMap;\n  balances: BalancesMap;\n}\n\nconst INITIAL_FROM: ExchangeItem = {\n  currencyCode: 'PLN',\n  amount: '0',\n};\n\nconst INITIAL_TO: ExchangeItem = {\n  currencyCode: 'USD',\n  amount: '0',\n};\n\nconst INITIAL_BALANCES: BalancesMap = {\n  PLN: 1500,\n  USD: 1000,\n  SEK: 500,\n  GBP: 3000,\n};\n\nconst INITIAL_EXCHANGE_STATE: ExchangeState = {\n  source: INITIAL_FROM,\n  target: INITIAL_TO,\n  rates: {},\n  balances: INITIAL_BALANCES,\n};\n\nconst getNewSourceAmount = (\n  targetAmount: string,\n  targetCurrencyCode: string,\n  rates: RatesMap\n): string => {\n  const rate = rates[targetCurrencyCode];\n  const fullAmount = +targetAmount / rates[targetCurrencyCode] || 0;\n  const sourceAmount =\n    rate < 1 ? Math.ceil(fullAmount * 100) / 100 : Math.floor(fullAmount * 100) / 100;\n  return sourceAmount.toFixed(2).toString();\n};\n\nconst getNewTargetAmount = (\n  sourceAmount: string,\n  targetCurrencyCode: string,\n  rates: RatesMap\n): string => {\n  const rate = rates[targetCurrencyCode];\n  const fullAmount = +sourceAmount * rate || 0;\n  const targetAmount =\n    rate < 1 ? Math.floor(fullAmount * 100) / 100 : Math.ceil(fullAmount * 100) / 100;\n  return targetAmount.toFixed(2).toString();\n};\n\nconst flipCurrencies = (state: ExchangeState): ExchangeState => ({\n  ...state,\n  source: { ...state.target },\n  target: { ...state.source },\n});\n\nconst handleSourceAmountChangedAction = (\n  state: ExchangeState,\n  { payload: amount }: AmountChangedAction\n): ExchangeState => ({\n  ...state,\n  source: {\n    ...state.source,\n    amount,\n  },\n  target: {\n    ...state.target,\n    amount: getNewTargetAmount(amount, state.target.currencyCode, state.rates),\n  },\n});\n\nconst handleTargetAmountChangedAction = (\n  state: ExchangeState,\n  { payload: amount }: AmountChangedAction\n): ExchangeState => ({\n  ...state,\n  target: {\n    ...state.target,\n    amount,\n  },\n  source: {\n    ...state.source,\n    amount: getNewSourceAmount(amount, state.target.currencyCode, state.rates),\n  },\n});\n\nconst handleSourceCurrencyChanged = (\n  state: ExchangeState,\n  { payload: currency }: CurrencyChangedAction\n): ExchangeState => {\n  if (currency.code === state.target.currencyCode) {\n    return flipCurrencies(state);\n  }\n  return {\n    ...state,\n    source: {\n      ...state.source,\n      currencyCode: currency.code,\n    },\n  };\n};\n\nconst handleTargetCurrencyChanged = (\n  state: ExchangeState,\n  { payload: currency }: CurrencyChangedAction\n): ExchangeState => {\n  const { target, rates } = state;\n  if (currency.code === state.source.currencyCode) {\n    return flipCurrencies(state);\n  }\n  return {\n    ...state,\n    target: {\n      ...state.target,\n      currencyCode: currency.code,\n    },\n    source: {\n      ...state.source,\n      amount: getNewSourceAmount(target.amount, currency.code, rates),\n    },\n  };\n};\n\nconst handleRatesUpdated = (\n  state: ExchangeState,\n  { payload: rates }: RatesUpdatedAction\n): ExchangeState => {\n  const { target: to, source: from } = state;\n  return {\n    ...state,\n    rates,\n    target: {\n      ...to,\n      amount: getNewTargetAmount(from.amount, to.currencyCode, rates),\n    },\n  };\n};\n\nconst handleExecuteExchange = (state: ExchangeState): ExchangeState => {\n  const { target, source, balances } = state;\n  const sourceBalance = balances[source.currencyCode] || 0;\n  const targetBalance = balances[target.currencyCode] || 0;\n  return {\n    ...state,\n    target: {\n      ...target,\n      amount: '0',\n    },\n    source: {\n      ...source,\n      amount: '0',\n    },\n    balances: {\n      ...balances,\n      [source.currencyCode]: +(sourceBalance - +source.amount).toFixed(2),\n      [target.currencyCode]: +(targetBalance + +target.amount).toFixed(2),\n    },\n  };\n};\n\nconst exchangeReducer = (\n  state: ExchangeState = INITIAL_EXCHANGE_STATE,\n  action: ExchangeActionTypes\n): ExchangeState => {\n  switch (action.type) {\n    case ExchangeActionType.FlipInputsClicked:\n      return flipCurrencies(state);\n\n    case ExchangeActionType.SourceAmountChanged:\n      return handleSourceAmountChangedAction(state, action as AmountChangedAction);\n\n    case ExchangeActionType.TargetAmountChanged:\n      return handleTargetAmountChangedAction(state, action as AmountChangedAction);\n\n    case ExchangeActionType.SourceCurrencyChanged:\n      return handleSourceCurrencyChanged(state, action as CurrencyChangedAction);\n\n    case ExchangeActionType.TargetCurrencyChanged:\n      return handleTargetCurrencyChanged(state, action as CurrencyChangedAction);\n\n    case ExchangeActionType.RatesUpdated:\n      return handleRatesUpdated(state, action as RatesUpdatedAction);\n\n    case ExchangeActionType.ExecuteExchange:\n      return handleExecuteExchange(state);\n\n    default:\n      return state;\n  }\n};\n\nexport default exchangeReducer;\n","import { combineReducers } from 'redux';\nimport exchangeReducer, { ExchangeState } from './exchange.reducer';\n\nexport interface RootState {\n  exchange: ExchangeState;\n}\n\nexport default combineReducers({\n  exchange: exchangeReducer,\n});\n","import React from 'react';\nimport { Exchange } from './containers/exchange.container';\nimport styled from 'styled-components';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware()));\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  margin: auto;\n  min-width: 300px;\n  max-width: 500px;\n  padding: 0 40px;\n  background: #fff;\n  ::before {\n    position: fixed;\n    content: ' ';\n    bottom: 0;\n    right: 0;\n    width: 100%;\n    height: 50%;\n    background: #f8f8f8;\n  }\n`;\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <AppWrapper>\n        <Exchange />\n      </AppWrapper>\n    </Provider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}